name: CI + CD

on:
  pull_request:
  push:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      image-tag:
        description: "The tag to assign to the images built in the workflow."
        type: string
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'release' && 'release' || github.ref }}
  # Don't continue building images for a PR if the PR is updated quickly
  # For other workflows, allow them to complete and just block on them. This
  # ensures deployments in particular to happen in series rather than parallel.
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  ###########
  # Helpers #
  ###########

  get-changes:
    name: Get changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      api: ${{ steps.paths-filter.outputs.api }}
      ingestion_server: ${{ steps.paths-filter.outputs.ingestion_server }}
      frontend: ${{ steps.paths-filter.outputs.frontend }}
      changes: ${{ steps.paths-filter.outputs.changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get changes
        id: paths-filter
        uses: ./.github/actions/get-changes

  get-image-tag:
    name: Get image tag
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.get-image-tag.outputs.image-tag }}

    steps:
      - name: Get image tag
        id: get-image-tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "image-tag=${{ inputs.image-tag }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
              echo "image-tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
              echo "image-tag=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi

  determine-images:
    name: Determine images to build and publish
    runs-on: ubuntu-latest
    outputs:
      do-build: ${{ steps.set-matrix.outputs.do-build }}
      build-matrix: ${{ steps.set-matrix.outputs.build-matrix }}
      do-publish: ${{ steps.set-matrix.outputs.do-publish }}
      publish-matrix: ${{ steps.set-matrix.outputs.publish-matrix }}
    needs:
      - get-changes

    steps:
      - name: Set matrix images
        id: set-matrix
        env:
          CHANGES: ${{ needs.get-changes.outputs.changes }}
        shell: python
        run: |
          import os
          import json

          changes = json.loads(os.environ.get('CHANGES'))

          build_matrix = {"image": [], "include": []}
          publish_matrix = {"image": []}

          if "frontend" in changes:
              build_matrix["image"].append("frontend")
              build_matrix["include"].append({"image": "frontend", "target": "app"})
              publish_matrix["image"].append("frontend")
          if "api" in changes or "ingestion_server" in changes:
              # Always build the ingestion server and API images for either changeset
              build_matrix["image"] += ["api", "ingestion_server"]
              build_matrix["include"] += [
                {"image": "ingestion_server", "target": "ing"},
                {"image": "api", "target": "api"},
              ]
              if "api" in changes:
                  publish_matrix["image"] += ["api", "api_nginx"]
              if "ingestion_server" in changes:
                  publish_matrix["image"].append("ingestion_server")

          do_build = 'true' if len(build_matrix["image"]) else 'false'
          build_matrix = json.dumps(build_matrix)
          do_publish = 'true' if len(publish_matrix["image"]) else 'false'
          publish_matrix = json.dumps(publish_matrix)

          print(f"do-build={do_build}")
          print(f"build-matrix={build_matrix}")
          print(f"do-publish={do_publish}")
          print(f"publish-matrix={publish_matrix}")

          with open(os.environ.get("GITHUB_OUTPUT"), "a") as gh_out:
              print(f"do-build={do_build}", file=gh_out)
              print(f"build-matrix={build_matrix}", file=gh_out)
              print(f"do-publish={do_publish}", file=gh_out)
              print(f"publish-matrix={publish_matrix}", file=gh_out)

  #############
  # Universal #
  #############

  lint: # This includes type-checking of the frontend.
    name: Lint files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Python is not needed to run pre-commit.
          setup_python: false
          # Node.js is needed by lint actions.
          install_recipe: "node-install"

      - name: Cache pre-commit envs
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit to lint files
        run: |
          just precommit
          just lint

  add-stack-label:
    name: Add stack label
    if: github.event_name == 'pull_request' && github.repository == 'WordPress/openverse'
    runs-on: ubuntu-latest
    needs:
      - get-changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Add API stack label
        uses: actions-ecosystem/action-add-labels@v1
        if: ${{ needs.get-changes.outputs.api == 'true' }}
        with:
          labels: "üß± stack: api"

      - name: Add ingestion server stack label
        uses: actions-ecosystem/action-add-labels@v1
        if: ${{ needs.get-changes.outputs.ingestion_server == 'true' }}
        with:
          labels: "üß± stack: ingestion server"

      - name: Add frontend stack label
        uses: actions-ecosystem/action-add-labels@v1
        if: ${{ needs.get-changes.outputs.frontend == 'true' }}
        with:
          labels: "üß± stack: frontend"

  build-images:
    name: Build Docker images
    if: needs.determine-images.outputs.do-build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.determine-images.outputs.build-matrix) }}
    needs:
      - get-image-tag
      - lint
      - determine-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ‚ÑπÔ∏èStep only applies for frontend image.
      - name: Setup CI env
        if: matrix.image == 'frontend'
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          # Python is not needed to build the image.
          install_recipe: node-install

      # ‚ÑπÔ∏èStep only applies for frontend image.
      # This step
      # - downloads translation strings from GlotPress so that they can be
      #   bundled inside the Docker image
      # - copies pnpm config files from the root to the `frontend/` directory
      #   so that they can be used to mock a workspace inside the Docker image
      - name: Prepare frontend for building
        if: matrix.image == 'frontend'
        run: |
          just frontend/run i18n
          cp .npmrc .pnpmfile.cjs pnpm-lock.yaml frontend/
        env:
          GLOTPRESS_USERNAME: ${{ secrets.MAKE_USERNAME }}
          GLOTPRESS_PASSWORD: ${{ secrets.MAKE_LOGIN_PASSWORD }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Build image `${{ matrix.image }}`
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.image }}
          target: ${{ matrix.target }}
          push: false
          tags: openverse-${{ matrix.image }}
          cache-from: type=gha,scope=${{ matrix.image }}
          cache-to: type=gha,scope=${{ matrix.image }}
          outputs: type=docker,dest=/tmp/${{ matrix.image }}.tar
          build-args: |
            SEMANTIC_VERSION=${{ needs.get-image-tag.outputs.image-tag }}

      - name: Upload image `${{ matrix.image }}`
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.image }}
          path: /tmp/${{ matrix.image }}.tar

  ####################
  # Ingestion server #
  ####################

  test-ing:
    name: Run tests for ingestion-server
    if: needs.get-changes.outputs.ingestion_server == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - get-changes
      - build-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Python is needed to run the test.
          setup_nodejs: false
          # Node.js is not needed to run ingestion server tests.
          install_recipe: ingestion_server/install

      - name: Load Docker images
        uses: ./.github/actions/load-img
        with:
          setup_api: false

      - name: Run ingestion-server tests
        run: just ingestion_server/test-local

      - name: Upload ingestion test logs
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: ing_logs
          path: ingestion_server/test/ingestion_logs.txt

      - name: Print ingestion test logs
        if: success() || failure()
        run: cat ingestion_server/test/ingestion_logs.txt

  #######
  # API #
  #######

  test-api:
    name: Run tests for the API
    if: needs.get-changes.outputs.ingestion_server == 'true' || needs.get-changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - get-changes
      - build-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          # Python is not needed to run the tests.
          setup_nodejs: false
          # Node.js is not needed to run API tests.
          install_recipe: ""

      - name: Load Docker images
        uses: ./.github/actions/load-img

      - name: Start API, ingest and index test data
        run: just api/init

      - name: Run API tests
        run: just api/test

      - name: Print API test logs
        if: success() || failure()
        run: |
          just logs > api_logs
          cat api_logs

      - name: Upload API test logs
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: api_logs
          path: api_logs

  test-redoc:
    name: Check for API consumer docs
    if: needs.get-changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    needs:
      - get-changes
      - build-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          # Python is not needed to run the tests.
          setup_nodejs: false
          # Node.js is not needed to run API tests.
          install_recipe: ""

      - name: Load Docker images
        uses: ./.github/actions/load-img

      - name: Test ReDoc site
        run: just api/doc-test

  validate-openapi-spec:
    name: Validate Open API spec
    if: needs.get-changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    needs:
      - get-changes
      - build-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          # Python is not needed to run the tests.
          setup_nodejs: false
          # Node.js is not needed to run API tests.
          install_recipe: ""

      - name: Load Docker images
        uses: ./.github/actions/load-img

      - name: Run check
        run: just api/dj validateopenapischema
        env:
          DC_USER: root

      - name: Upload schema on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: openverse-api-openapi-schema.yaml
          path: ./api/openapi.yaml

  django-check:
    name: Run Django check
    if: needs.get-changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    needs:
      - get-changes
      - build-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          # Python is not needed to run the tests.
          setup_nodejs: false
          # Node.js is not needed to run API tests.
          install_recipe: ""

      - name: Load Docker images
        uses: ./.github/actions/load-img

      - name: Run check
        run: just api/dj check

  check-migrations:
    name: Check for uncommitted Django migrations
    if: needs.get-changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    needs:
      - get-changes
      - build-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          # Python is not needed to run the tests.
          setup_nodejs: false
          # Node.js is not needed to run API tests.
          install_recipe: ""

      - name: Load Docker images
        uses: ./.github/actions/load-img

      - name: Run makemigrations
        run: just api/dj makemigrations --check --noinput --merge

  #########
  # NGINX #
  #########

  build-nginx:
    # This requires a separate job due because it uses the API image built by
    # the `build-images` job.
    name: Build `nginx` Docker image
    runs-on: ubuntu-latest
    if: needs.get-changes.outputs.api == 'true'
    needs:
      - get-changes
      - build-images
      - get-image-tag

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          # Python is not needed to build the image.
          setup_nodejs: false
          # Node.js is not needed to build the image.
          install_recipe: ""

      - name: Load Docker images
        uses: ./.github/actions/load-img

      - name: collectstatic
        run: |
          just api/collectstatic
        env:
          DC_USER: root

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Build image `api_nginx`
        uses: docker/build-push-action@v4
        with:
          context: api
          target: nginx # from `api/Dockerfile`
          push: false
          tags: openverse-api_nginx
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,scope=nginx
          outputs: type=docker,dest=/tmp/api_nginx.tar
          build-args: |
            SEMANTIC_VERSION=${{ needs.get-image-tag.outputs.image-tag }}

      - name: Upload image `api_nginx`
        uses: actions/upload-artifact@v3
        with:
          name: api_nginx
          path: /tmp/api_nginx.tar

  ############
  # Frontend #
  ############

  frontend-unit:
    name: Run frontend unit tests
    if: needs.get-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    needs:
      - get-changes
      - lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          install_recipe: node-install

      - name: Run unit tests
        run: just frontend/run test:unit

  storybook-smoke:
    name: Check Storybook smoke test
    if: needs.get-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    needs:
      - get-changes
      - lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          install_recipe: node-install

      - name: Run Storybook smoke-test
        run: just frontend/run storybook:smoke

  nuxt-build:
    name: Check Nuxt build
    if: needs.get-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    needs:
      - get-changes
      - lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          install_recipe: node-install

      - name: Run build
        run: just frontend/run build

  nuxt-playwright-e2e:
    name: Nuxt Playwright e2e tests
    if: needs.get-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - get-changes
      - lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          install_recipe: node-install

      - name: Run Nuxt Playwright e2e tests
        run: just frontend/run test:playwright e2e --workers=2

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: nuxt-e2e-test-results
          path: frontend/test-results

  nuxt-playwright-vr:
    name: Nuxt Playwright VR tests
    if: needs.get-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - get-changes
      - lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          install_recipe: node-install

      - name: Run Nuxt Playwright visual regression tests
        run: just frontend/run test:playwright visual-regression --workers=2

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: nuxt-vr-test-results
          path: frontend/test-results

  storybook-playwright:
    name: Storybook Playwright tests
    if: needs.get-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - get-changes
      - lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          setup_python: false
          install_recipe: node-install

      - name: Run Storybook Playwright tests
        run: just frontend/run test:storybook

      - uses: actions/upload-artifact@v3
        if: failure()
        id: test-results
        with:
          name: storybook-test-results
          path: frontend/test-results

  clean-playwright-failure-comment:
    name: Remove Playwright test debugging instructions
    if: github.event_name == 'pull_request' && needs.get-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    needs:
      - get-changes

    steps:
      - uses: peter-evans/find-comment@v2
        id: test-results-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: Playwright failure test results

      - uses: actions/github-script@v6
        if: steps.test-results-comment.outputs.comment-id != 0
        with:
          script: |
            await github.rest.issues.deleteComment({
              repo: context.repo.repo,
              owner: context.repo.owner,
              comment_id: ${{ steps.test-results-comment.outputs.comment-id }}
            })
            console.log('Deleted comment with ID ${{ steps.test-results-comment.outputs.comment-id }}')

  playwright-test-failure-comment:
    name: Post Playwright test debugging instructions
    if: |
      (success() || failure()) &&
      github.event_name == 'pull_request' &&
      (needs.nuxt-playwright-vr.result == 'failure' || needs.nuxt-playwright-e2e.result == 'failure' || needs.storybook-playwright.result == 'failure')
    runs-on: ubuntu-latest
    needs:
      - nuxt-playwright-e2e
      - nuxt-playwright-vr
      - storybook-playwright
      - clean-playwright-failure-comment

    steps:
      - uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Playwright failure test results**

            It looks like some of the Playwright tests failed. You can download the Playwright trace
            output for all playwright tests that have failed at the bottom of this page, under the
            "Artifacts" section:

            <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}>

            Read more about how to use this artifact here: <https://github.com/${{ github.repository }}/blob/main/frontend/test/playwright/README.md#debugging>

  #################
  # Documentation #
  #################

  docs-publish:
    name: Publish full-stack docs
    # https://github.com/actions/runner/issues/491#issuecomment-850884422
    if: |
      !failure() && !cancelled() &&
      (needs.test-ing.result == 'success' || needs.test-ing.result == 'skipped') &&
      (needs.test-api.result == 'success' || needs.test-api.result == 'skipped') &&
      (needs.nuxt-build.result == 'success' || needs.nuxt-build.result == 'skipped') &&
      github.event_name == 'push'
    runs-on: ubuntu-latest
    needs:
      - test-ing
      - test-api
      - nuxt-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile documentation
        uses: ./.github/actions/build-docs
        # Docs will be located at `/tmp/docs`.

      - name: Checkout repository at `gh-pages` branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Preserve previews
        run: mv _preview /tmp/docs/_preview

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: /tmp/docs
          force_orphan: true

      - name: Checkout repository # again, to enable cleaning
        uses: actions/checkout@v3
        if: always()

  docs-preview:
    name: Preview full-stack docs
    # https://github.com/actions/runner/issues/491#issuecomment-850884422
    if: |
      !failure() && !cancelled() &&
      (needs.test-ing.result == 'success' || needs.test-ing.result == 'skipped') &&
      (needs.test-api.result == 'success' || needs.test-api.result == 'skipped') &&
      (needs.nuxt-build.result == 'success' || needs.nuxt-build.result == 'skipped') &&
      github.event_name == 'pull_request' && github.event.pull_request.head.repo.owner.login == 'WordPress' && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs:
      - test-ing
      - test-api
      - nuxt-build
    env:
      REPO_OWNER: ${{ github.event.pull_request.head.repo.owner.login }}
      REPO_NAME: ${{ github.event.pull_request.head.repo.name }}

    steps:
      - uses: peter-evans/find-comment@v2
        id: preview-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: Full-stack documentation

      - uses: peter-evans/create-or-update-comment@v2
        if: steps.preview-comment.outputs.comment-id != 0
        with:
          comment-id: ${{ steps.preview-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            **Full-stack documentation**: _Updating_

            (This comment will be automatically updated with the preview URL once it is ready)

      - uses: peter-evans/create-or-update-comment@v2
        if: steps.preview-comment.outputs.comment-id == 0
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Full-stack documentation**: _Updating_

            (This comment will be automatically updated with the preview URLs once it is ready)

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CI env
        uses: ./.github/actions/setup-env
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile documentation
        uses: ./.github/actions/build-docs
        # Docs will be located at `/tmp/docs`.

      - name: Recreate working directory # to avoid superfluous files from getting tracked automatically
        run: |
          cd ..
          sudo rm -rf "$REPO_NAME"
          mkdir "$REPO_NAME"

      - name: Checkout repository at `gh-pages` branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Merge preview with existing gh-pages
        run: |
          cd ..
          cp -r "$REPO_NAME" /tmp/gh-pages
          # Trash the existing preview folder and replace it with the newly generated one.
          # If the preview hasn't been pushed yet this will still exit with code 0.
          sudo rm -rf /tmp/gh-pages/_preview/${{ github.event.pull_request.number }}
          mv /tmp/docs /tmp/gh-pages/_preview/${{ github.event.pull_request.number }}
          cd "$REPO_NAME"

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: /tmp/gh-pages
          force_orphan: true

      - uses: peter-evans/find-comment@v2
        id: final-preview-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: Full-stack documentation

      - uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.final-preview-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            **Full-stack documentation**: _Ready_

            <https://${{ env.REPO_OWNER }}.github.io/${{ env.REPO_NAME }}/_preview/${{ github.event.pull_request.number }}>

            Please note that GitHub pages takes a little time to deploy newly pushed code, if the links above don't work or you see old versions, wait 5 minutes and try again.

            You can check [the GitHub pages deployment action list](https://github.com/${{ github.repository }}/actions/workflows/pages/pages-build-deployment) to see the current status of the deployments.

      - name: Checkout repository # again, to enable cleaning
        uses: actions/checkout@v3
        if: always()

  #################
  # Docker images #
  #################

  publish-images:
    name: Publish Docker images
    runs-on: ubuntu-latest
    # prevent running on fork PRs
    if: |
      !failure() && !cancelled() &&
      needs.determine-images.outputs.do-publish == 'true' &&
      (needs.test-ing.result == 'success' || needs.test-ing.result == 'skipped') &&
      (needs.test-api.result == 'success' || needs.test-api.result == 'skipped') &&
      (needs.nuxt-build.result == 'success' || needs.nuxt-build.result == 'skipped') &&
      ((github.event_name == 'push' && github.repository == 'WordPress/openverse') || (github.event_name == 'release' && github.repository == 'WordPress/openverse'))
    needs:
      - determine-images
      - get-image-tag
      - build-images
      - build-nginx
      - test-ing # test for ingestion server
      - test-api # test for API
      - nuxt-build # test for frontend
    permissions:
      packages: write
      contents: read
    strategy:
      matrix: ${{ fromJson(needs.determine-images.outputs.publish-matrix) }}

    steps:
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v2
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download image `${{ matrix.image }}`
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.image }}
          path: /tmp

      - name: Load and tag image `${{ matrix.image }}` (latest & sha)
        run: |
          docker load --input /tmp/${{ matrix.image }}.tar
          docker tag openverse-${{ matrix.image }} \
            ghcr.io/wordpress/openverse-${{ matrix.image }}:latest
          docker tag openverse-${{ matrix.image }} \
            ghcr.io/wordpress/openverse-${{ matrix.image }}:${{ needs.get-image-tag.outputs.image-tag }}
          docker push --all-tags ghcr.io/wordpress/openverse-${{ matrix.image }}

  ##############
  # Deployment #
  ##############

  deploy-frontend:
    name: Deploy staging frontend
    if: |
      !failure() && !cancelled() &&
      github.event_name == 'push' && needs.get-changes.outputs.frontend == 'true' &&
      (needs.nuxt-build.result == 'success' && needs.nuxt-playwright-e2e.result == 'success' && needs.nuxt-playwright-vr.result == 'success' && needs.storybook-playwright.result == 'success')
    needs:
      - get-image-tag
      - get-changes
      - nuxt-build
      - nuxt-playwright-e2e
      - nuxt-playwright-vr
      - storybook-playwright
      - publish-images
    uses: ./.github/workflows/deploy-staging-nuxt.yml
    with:
      tag: ${{ needs.get-image-tag.outputs.image-tag }}
    secrets: inherit

  deploy-api:
    name: Deploy staging API
    if: |
      !failure() && !cancelled() &&
      github.event_name == 'push' && needs.get-changes.outputs.api == 'true' &&
      (needs.test-api.result == 'success' && needs.publish-images.result == 'success')
    needs:
      - get-image-tag
      - get-changes
      - test-api
      - publish-images
    uses: ./.github/workflows/deploy-staging-api.yml
    with:
      tag: ${{ needs.get-image-tag.outputs.image-tag }}
    secrets: inherit
