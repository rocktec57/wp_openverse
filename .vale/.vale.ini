MinAlertLevel = suggestion
Vocab = Openverse
# Using an explicit reference to downloads for package zips rather than the shorthand allows us to
# pin the package to a specific version. Otherwise, changes in the upstream style configuration can
# cause sudden and unexpected failures during linting.
Packages = https://github.com/errata-ai/proselint/releases/download/v0.3.3/proselint.zip

# The default settings also ignore `pre` and `code`, which includes admonition code blocks.
# We may encounter false positives by including code blocks, but we use admonitions
# so frequently in Openverse documentation that it is probably worth it to include them.
SkippedScopes = script, style, figure
IgnoredScopes = tt

[formats]
# Treat mdx as markdown (for Storybook support)
mdx = md

# Only configure Markdown, because that's the only language we use to write documentation in
# (Except MDX, but if we want to add Vale there it will have to be at a later date to avoid complexity
# in the initial setup)
[*.md]
BasedOnStyles = proselint, Vale, Openverse

# Avoid Vale.Spelling for now, but we do want Vale.Terms for the vocab at least
Vale.Spelling = NO

# The suggested terms are obscure
proselint.AnimalLabels = NO

# These are rarely necessary changes and can be more fiddly than they are helpful
proselint.Typography = NO

# proselint.Needless considers a host of terms "needless" which are natural and wide-spread changes in the English language,
# and is clearly favouring US changes rather than others (the US isn't the only or even the largest English speaking country).
# You don't have to look far to find examples of this rule preferring variants of terms in line with 18th century elite preferences:
# https://www.merriam-webster.com/grammar/preventive-or-preventative
# In other words, it's a linguistic prescriptive holdover to insist on some of these terms being "needless" when they're in
# fact widespread and well understood. Not all the terms have this issue, but we'd have to rewrite
# practically the entire rule to sort out which ones we cared about. If we find any we _do_ care about, we can add them to our
# own substitution rule.
proselint.Needless = NO
